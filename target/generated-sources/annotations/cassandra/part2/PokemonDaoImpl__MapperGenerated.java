package cassandra.part2;

import com.datastax.oss.driver.api.core.PagingIterable;
import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class PokemonDaoImpl__MapperGenerated extends DaoBase implements PokemonDao {
  private static final Logger LOG = LoggerFactory.getLogger(PokemonDaoImpl__MapperGenerated.class);

  private final PokemonHelper__MapperGenerated pokemonHelper;

  private final PreparedStatement saveStatement;

  private final PreparedStatement deleteStatement;

  private final PreparedStatement findByNameStatement;

  private final PreparedStatement findByGenerationStatement;

  private PokemonDaoImpl__MapperGenerated(MapperContext context,
      PokemonHelper__MapperGenerated pokemonHelper, PreparedStatement saveStatement,
      PreparedStatement deleteStatement, PreparedStatement findByNameStatement,
      PreparedStatement findByGenerationStatement) {
    super(context);
    this.pokemonHelper = pokemonHelper;
    this.saveStatement = saveStatement;
    this.deleteStatement = deleteStatement;
    this.findByNameStatement = findByNameStatement;
    this.findByGenerationStatement = findByGenerationStatement;
  }

  @Override
  public void save(Pokemon pokemon) {
    BoundStatementBuilder boundStatementBuilder = saveStatement.boundStatementBuilder();
    pokemonHelper.set(pokemon, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void delete(Pokemon pokemon) {
    BoundStatementBuilder boundStatementBuilder = deleteStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.setInt("generation", pokemon.getGeneration());
    boundStatementBuilder = boundStatementBuilder.set("type", pokemon.getType(), String.class);
    boundStatementBuilder = boundStatementBuilder.setInt("id", pokemon.getId());
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public Pokemon findByName(String name) {
    BoundStatementBuilder boundStatementBuilder = findByNameStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("name", name, String.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToSingleEntity(boundStatement, pokemonHelper);
  }

  @Override
  public PagingIterable<Pokemon> findByGeneration(int generation) {
    BoundStatementBuilder boundStatementBuilder = findByGenerationStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.setInt("generation", generation);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, pokemonHelper);
  }

  public static CompletableFuture<PokemonDao> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      PokemonHelper__MapperGenerated pokemonHelper = new PokemonHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        pokemonHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `save(cassandra.part2.Pokemon)`:
      SimpleStatement saveStatement_simple = pokemonHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method save(cassandra.part2.Pokemon)",
          context.getSession().getName(),
          saveStatement_simple.getQuery());
      CompletionStage<PreparedStatement> saveStatement = prepare(saveStatement_simple, context);
      prepareStages.add(saveStatement);
      // Prepare the statement for `delete(cassandra.part2.Pokemon)`:
      SimpleStatement deleteStatement_simple = pokemonHelper.deleteByPrimaryKeyParts(3).build();
      LOG.debug("[{}] Preparing query `{}` for method delete(cassandra.part2.Pokemon)",
          context.getSession().getName(),
          deleteStatement_simple.getQuery());
      CompletionStage<PreparedStatement> deleteStatement = prepare(deleteStatement_simple, context);
      prepareStages.add(deleteStatement);
      // Prepare the statement for `findByName(java.lang.String)`:
      SimpleStatement findByNameStatement_simple = pokemonHelper.selectStart().whereRaw("name = :name").allowFiltering().build();
      LOG.debug("[{}] Preparing query `{}` for method findByName(java.lang.String)",
          context.getSession().getName(),
          findByNameStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findByNameStatement = prepare(findByNameStatement_simple, context);
      prepareStages.add(findByNameStatement);
      // Prepare the statement for `findByGeneration(int)`:
      SimpleStatement findByGenerationStatement_simple = pokemonHelper.selectByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method findByGeneration(int)",
          context.getSession().getName(),
          findByGenerationStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findByGenerationStatement = prepare(findByGenerationStatement_simple, context);
      prepareStages.add(findByGenerationStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (PokemonDao) new PokemonDaoImpl__MapperGenerated(context,
              pokemonHelper,
              CompletableFutures.getCompleted(saveStatement),
              CompletableFutures.getCompleted(deleteStatement),
              CompletableFutures.getCompleted(findByNameStatement),
              CompletableFutures.getCompleted(findByGenerationStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static PokemonDao init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
